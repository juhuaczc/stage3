1. 案例
    访问一个页面，该页面中包含css，js和img等资源

    问题：index.html页面能看到，但是引用的css、js、图片无法正常访问
    原因：NodeJs没有根目录
    解决方法 手动设置一个根目录(在所有的请求地址前面都拼上一个固定的文件夹路径，这个文件夹是手动设置的根目录)
2. 模块
    在NodeJs中，以模块为单位划分所有的功能，并提供一个完整的模块加载机制
    使用模块功能，可以将一个完整的应用分割成不同的部分，使代码之间的耦合度降低
    不建议在一个js中写所有的复杂代码

    如何在一个js里使用另一个js (02.js)
        关键词：require
        注意：
            在引入时，后缀名.js可以省略不写，但是不建议
            表示当前路径的./必须添加
        
    如何使用其他js中的属性和方法
        使用关键字exports
            exports.属性名/方法名 = 属性名/方法名
        将需要给别人使用的属性/方法暴露出去

    如何暴露一个对象
        module.exports = 对象

练习1：
    封装一个router.js,由lianxi01.js引用
    在lianxi01.js中启动http服务接收请求
    请求的处理与响应由router.js操作
    router.js暴露3个方法：
        showIndex(),showInfo(),showErr()
        这是首页    这是信息页  这是错误页
    lianxi01.js处理以下请求：
        / 显示  这是首页
        /info 显示 这是信息页
        其他地址    显示 这是错误页


    如何暴露一个文件夹
        狭义上的模块：一个js文件就是一个模块
        广义上的模块：多个js文件相互引用，最终实现一个大的功能

        将封装的代码全部放入到一个文件夹里，然后在使用时，直接引用文件夹名称

        注意：
            被引入的文件夹中，必须包含一个index.js文件，该文件作为该文件夹模块的入口文件
            如果文件夹中没有index.js,则必须要添加一个配置文件package.jsn,用于指定入口文件

            配置文件生成
                npm init -y
    
        注意：
            在引用自己封装的模块时，表示当前路径的./不可省略，如果省略则查找模块失败。因为node会从一个特殊的文件夹中去查找对应的模块：node_modules

            node_modules不需要在当前路径下，可以在直接父级目录下即可